// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Users {
  id Int @id @default(autoincrement())
  username String @unique @db.VarChar(45)
  email String @unique @db.VarChar(45)
  password String @db.VarChar(100)
  role_id Int @default(3)
  profile_picture String? @db.VarChar(255)
  fullname String? @db.VarChar(100)
  biography String? @db.VarChar(100)
  phone_number Int?
  country String? @db.VarChar(100)
  balance Int @default(200)
  date_of_birth String? 
  status String @db.VarChar(100) @default("Active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  collaborators Collaborators[]
  post Posts[]
  playlists Playlists[]
  comment Comments[] @relation("Commenter")
  liker Likes[] @relation("Liker")
  projects Projects[]@relation("ProjectOwner")
  albums Albums[] @relation("MusicianAlbum")
  tracks Tracks[] @relation("MusicianUploader")
  followers Users_Follows[] @relation("Followers")
  followings Users_Follows[] @relation("Followings")
  requester Coin_Requests[] @relation("Requester")
}

model Posts {
  id Int @id @default(autoincrement())
  caption String @db.VarChar(45)
  post_picture String @db.VarChar(255)
  hashtags String @db.VarChar(45)
  user_id Int
  user Users @relation(fields: [user_id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comment Comments[]@relation("Post_Commented")
  likes Likes[] @relation("Posted_liked")
}

model Likes {
  id Int @id @default(autoincrement())
  user_id Int
  post_id Int
  user Users @relation("Liker",fields: [user_id], references: [id])
  post Posts @relation("Posted_liked",fields: [post_id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comments{
  id Int @id @default(autoincrement())
  content String @db.VarChar(45)
  user_id Int
  post_id Int
  user Users @relation("Commenter",fields: [user_id], references: [id])
  post Posts @relation("Post_Commented",fields: [post_id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Users_Follows{
  id Int @id @default(autoincrement())
  follower_id Int
  following_id Int
  user_follower Users? @relation("Followers",fields: [follower_id], references: [id])
  user_following Users? @relation("Followings",fields: [following_id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coin_Requests{
  id Int @id @default(autoincrement())
  amount Int
  status String @default("Pending")
  user_id Int
  user Users @relation("Requester",fields: [user_id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tracks{
  id Int @id @default(autoincrement())
  track_name String @db.VarChar(45)
  duration String @db.VarChar(45)
  audio_url String @db.VarChar(45)
  track_image String @db.VarChar(255)
  explicit String @db.VarChar(45)
  status String @db.VarChar(45)
  user_id Int
  album_id Int
  user Users @relation("MusicianUploader",fields: [user_id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  playlists Playlists[]
}

model Albums{
  id Int @id @default(autoincrement())
  title String @db.VarChar(45)
  genre String @db.VarChar(45)
  cover_image String @db.VarChar(255)
  user_id Int
  user Users @relation("MusicianAlbum",fields: [user_id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Playlists{
  id Int @id @default(autoincrement())
  title String @db.VarChar(45)
  playlist_image String @db.VarChar(45)
  user_id Int
  user Users @relation(fields: [user_id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tracks Tracks[]
}

model Projects{
  id Int @id @default(autoincrement())
  project_name String @db.VarChar(45)
  type String @db.VarChar(45)
  description String @db.VarChar(45)
  privacy String @db.VarChar(45)
  track_name String @db.VarChar(45)
  track_image String @db.VarChar(255)
  audio_url String @db.VarChar(45)
  duration String @db.VarChar(45)
  genre String @db.VarChar(45)
  creator_id Int
  creator Users @relation("ProjectOwner",fields: [creator_id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  collaboratorsonthisProject Collaborators[]
}

model Collaborators{
  id Int @id @default(autoincrement())
  slice_name String @db.VarChar(45)
  slice_audio String @db.VarChar(45)
  duration String @db.VarChar(45)
  collaborator_id Int
  project_id Int
  project Projects @relation(fields: [project_id], references: [id])
  collaborator Users @relation(fields: [collaborator_id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model JamBoxes{
//   id Int @id @default(autoincrement())
//   title String @db.VarChar(45)
//   lyrics String @db.VarChar(245)
//   artist_voice String @db.VarChar(45)
//   user_id Int
//   user Users @relation(fields: [user_id], references: [id])
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }